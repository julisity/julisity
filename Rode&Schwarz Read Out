#only trying out to read the values of a R&S®ZNB20. lot of unessscecry code and performace diminishing code.
#again, its only a try, but it works for me.
#hook up the R&S®ZNB40 to the CAT port on your pc and it should work if the IP adress (see variable instr)
#the correct IP adress can be read from your network analyzer
#install the module RsInstrument using pip

#the programm creates a touchstone file with the 4 s parameters (s2p) and a csv file. 
#it also plots the results if you enable it, so install matplotlib using pip 

import sys
import time
import matplotlib.pyplot as plt
import numpy as np
from RsInstrument import *
import skrf as rf
import pandas as pd


instr = RsInstrument('TCPIP::10.20.50.206::5025::SOCKET', True, True, "SelectVisa='socket'")
startFreq = 1000
endFreq = 20000
measCount = 1900
visaTime = 3000
sweepTimeAuto = "On"
sweepContMode = "OFF"
sweepTime = 50
outputPowLev = -10
bandWid = 1000
cable_attenuation_generator = 1  # attenuation of cable between generator and DUT /dB
plotOnOff = True
csvFileOnOff = False
file_string = 'C:/Users/stu-jth/Documents/Tests/Tests/'
title = "Test1"


def meassetup():
    instr.write_str_with_opc('SYSTEM:DISPLAY:UPDATE ON')
    instr.write_str_with_opc(f'INIT:CONT {sweepContMode}')
    instr.write_str_with_opc(f'SENSe:SWEep:TIME:AUTO {sweepTimeAuto}')  # Auto Sweep time
    instr.write_str_with_opc('TRIGger:SEQuence:SOURce IMMediate')  # Trigger immediate (Auto)
    instr.write_str_with_opc('AVERage OFF')  # Averaging disabled
    instr.write_str_with_opc('SEGment:CLEar')  # Deletes all sweep segments in the channel

    instr.write_str_with_opc("SENSe1:SEGMent1:ADD")  # Add Segment 1
    instr.write_str_with_opc(f"SENSe1:SEGMent1:FREQuency:STARt {startFreq}MHz")  # Start Frequency
    instr.write_str_with_opc(f"SENSe1:SEGMent1:FREQuency:STOP {endFreq}MHz")  # Stop Frequency
    instr.write_str_with_opc(f"SENSe1:SEGMent1:SWEep:POINts {measCount}")  # No of Sweep Points
    instr.write_str_with_opc(f"SENSe1:SEGMent1:POWer:LEVel {outputPowLev}")  # Output Power Level
    instr.write_str_with_opc(f"SENSe1:SEGMent1:BWIDth {bandWid}Hz")  # RBW


# ----------------Measuring Real and Imaginary Results--------------------------
def s11Measure():
    instr.write_str_with_opc("CALCULATE1:PARAMETER:SDEFINE 'Trc1', 'S11'")  # Reconfigure the trace Trc1 to S21
    instr.write_str_with_opc("DISPLAY:WINDOW1:TRACE:EFEED 'Trc1'")  # Feed it again to the window
    instr.write_str_with_opc('SWEep:TYPE SEGMent')  # Segmented sweep mode
    instr.write_str_with_opc('INIT')
    s11Data = instr.query_str('CALCulate:DATA? SDATa')
    s11DataSep = s11Data.split(",")
    s11DataSepInt = [float(item) for item in s11DataSep]
    return s11DataSepInt


def s12Measure():
    instr.write_str_with_opc("CALCULATE1:PARAMETER:SDEFINE 'Trc1', 'S12'")  # Reconfigure the trace Trc1 to S21
    instr.write_str_with_opc("DISPLAY:WINDOW1:TRACE:EFEED 'Trc1'")  # Feed it again to the window
    instr.write_str_with_opc('SWEep:TYPE SEGMent')  # Segmented sweep mode
    instr.write_str_with_opc('INIT')
    s12Data = instr.query_str('CALCulate:DATA? SDATa')
    s12DataSep = s12Data.split(",")
    s12DataSepInt = [float(item) for item in s12DataSep]
    return s12DataSepInt


def s21Measure():
    instr.write_str_with_opc("CALCULATE1:PARAMETER:SDEFINE 'Trc1', 'S21'")  # Reconfigure the trace Trc1 to S21
    instr.write_str_with_opc("DISPLAY:WINDOW1:TRACE:EFEED 'Trc1'")  # Feed it again to the window
    instr.write_str_with_opc('SWEep:TYPE SEGMent')  # Segmented sweep mode
    instr.write_str_with_opc('INIT')
    s21Data = instr.query_str('CALCulate:DATA? SDATa')
    s21DataSep = s21Data.split(",")
    s21DataSepInt = [float(item) for item in s21DataSep]
    return s21DataSepInt


def s22Measure():
    instr.write_str_with_opc("CALCULATE1:PARAMETER:SDEFINE 'Trc1', 'S22'")  # Reconfigure the trace Trc1 to S21
    instr.write_str_with_opc("DISPLAY:WINDOW1:TRACE:EFEED 'Trc1'")  # Feed it again to the window
    instr.write_str_with_opc('SWEep:TYPE SEGMent')
    instr.write_str_with_opc('INIT')
    s22Data = instr.query_str('CALCulate:DATA? SDATa')
    s22DataSep = s22Data.split(",")
    s22DataSepInt = [float(item) for item in s22DataSep]
    return s22DataSepInt


def close():
    instr.close()


def createList(n):
    lst = []
    for i in range(n + 1):
        lst.append(i)
    return lst


# -----------------------------------------Starting the actual measurement program--------------------
print(instr.query_str('*IDN?'))
adj = input(
    f"Hello, shall I use these values? (Start Freq {startFreq} MHz; End Freq {endFreq} MHz; \nMeasurement "
    f"Count {measCount}; Visa TimeOut {visaTime / 1000} sec; SweepTime automatic {sweepTimeAuto}; \n"
    f"Sweeping continuously {sweepContMode}; If SweepTime Auto == False, sweep time {sweepTime}; "
    f"Output Power Level {outputPowLev}; \nBandwidth {bandWid} Hz); Plot the data = {plotOnOff}; Export CSV file = "
    f"{csvFileOnOff}, Title: {title}, File path: {file_string})"
    f"\n >>>If the variables are correct, hit the Enter Key, if NOT, type n and you can adjust some values: ")
# starting the test
while True:
    if adj == "":
        print("Ok, I will do that. Continuing with the measurement...\n")
        # calling the defined functions
        meassetup()

        # Measuring real and imaginary Results, dividing them into 2 lists. (PT1r = real, Pt2 imaginary))
        # s11
        s11Results = s11Measure()
        s11ResultsPt1r = s11Results[0::2]
        s11ResultsPt2i = s11Results[1::2]
        print(f"s11r {s11Results}")
        print(f"s11rPt1Real{s11ResultsPt1r}")
        print(f"s11rPt2Imag{s11ResultsPt2i}")
        print()
        # s12
        s12Results = s12Measure()
        s12ResultsPt1r = s12Results[0::2]
        s12ResultsPt2i = s12Results[1::2]
        print(f"s12 {s12Results}")
        print(f"s12rPt1Real{s12ResultsPt1r}")
        print(f"s12rPt2Imag{s12ResultsPt2i}")
        print()
        # s21
        s21Results = s21Measure()
        s21ResultsPt1r = s21Results[0::2]
        s21ResultsPt2i = s21Results[1::2]
        print(f"s21 {s21Results}")
        print(f"s21Pt1Real{s21ResultsPt1r}")
        print(f"s21Pt2Imag{s21ResultsPt2i}")
        print()
        # s22
        s22Results = s22Measure()
        s22ResultsPt1r = s22Results[0::2]
        s22ResultsPt2i = s22Results[1::2]
        print(f"s22 {s22Results}")
        print(f"s22rPt1Real{s22ResultsPt1r}")
        print(f"s22rPt2Imag{s22ResultsPt2i}")
        print()
        break
    # --------------------- renaming or false inputs-------------------------
    elif adj == "n":
        q = input(f"\nAlright, let's edit. Please type 1 for Start Freq in MHz; 2 for End Freq in MHz; 3 for Number of "
                  f"Measurement Points; \n4 for Output Power Level;5 for Bandwidth in Hz); 6 for Plot the data; "
                  f"7 for Export CSV file AND TYPE d IF YOU ARE FINISHED WITH EDITING!: "
                  )
        if q == "1":
            newStartFreq = int(input(f"What's the new Start Freq in MHz (between 0 MHz and your Stop Frequency, "
                                     f"smaller than 39999 MHz)? "))
            startFreq = newStartFreq
            # print(startFreq)
        elif q == "2":
            newEndFreq = int(input(f"What's the new Start Freq in MHz (between your Starting Frequency and 40000 Mhz, "
                                   f"greater than 0 Mhz)? "))
            endFreq = newEndFreq
        elif q == "3":
            newMeasCount = int(input("Whats the new number of Measurement Points? (Must be Greater than 0!) "))
            measCount = newMeasCount
        elif q == "4":
            newOutputLev = int(input("Whats the new output Level? "))
            outputPowLev = newOutputLev
        elif q == "5":
            newBandWid = int(input("Whats the new Measurement Bandwidth in Hz? "))
            bandWid = newBandWid
        elif q == "6":
            newPlotOnOff = (input("If the Measurement should be plotted immediately, "
                                  "type True, if not, type False. "))
            if newPlotOnOff == "True":
                plotOnOff = True
            else:
                plotOnOff = False
        elif q == "7":
            newCsvFileOnOff = bool(input("If the Measurement should be exported as a csv file, "
                                         "type True, if not, type False. "))
            if newCsvFileOnOff == "True":
                csvFileOnOff = True
            else:
                csvFileOnOff = False
        elif q == "d":
            print(f"OK! Continuing with these Values: Start Freq = {startFreq} MHz; End Freq {endFreq} MHz; "
                  f"\nNumber of Measurement points {measCount}; \n Output Power Level {outputPowLev}"
                  f";\nBandwidth {bandWid} Hz); Plot the data = {plotOnOff}; Export CSV file = "
                  f"{csvFileOnOff},")
            time.sleep(1)
            adj = ""
        else:
            print("That's not a correct input.")
    else:
        print("That's not a valid answer, please restart the Program.")
        close()
        sys.exit()
# ----------------------------------------------------------------------

print("I'm done with measuring!")

# ------------------------------plotting the results if the user wants every single graph plotted---------------
# configuring the x-axis: The Measured Frequencies
x = np.linspace(startFreq, endFreq, measCount)

if plotOnOff:
    # Configuring the y-Axis, creating the graphs
    fig, axs = plt.subplots(2, 4)
    axs[0, 0].plot(x, s11ResultsPt1r, 'tab:blue')
    axs[0, 0].set_title('s11ResultsPt1r')
    axs[1, 0].plot(x, s11ResultsPt2i, 'tab:blue')
    axs[1, 0].set_title('s11ResultsPt2i')
    # s12
    axs[0, 1].plot(x, s12ResultsPt1r, 'tab:orange')
    axs[0, 1].set_title('s12ResultsPt1r')
    axs[1, 1].plot(x, s12ResultsPt2i, 'tab:orange')
    axs[1, 1].set_title('s12ResultsPt2i')
    # s21
    axs[0, 2].plot(x, s21ResultsPt1r, 'tab:green')
    axs[0, 2].set_title('s21ResultsPt1r')
    axs[1, 2].plot(x, s21ResultsPt2i, 'tab:green')
    axs[1, 2].set_title('s21ResultsPt2i')
    # s22
    axs[0, 3].plot(x, s22ResultsPt1r, 'tab:red')
    axs[0, 3].set_title('s22real Results')
    axs[1, 3].plot(x, s22ResultsPt2i, 'tab:red')
    axs[1, 3].set_title('s22ResultsPt2i')
    # showing the results
    plt.show()
else:
    if csvFileOnOff:
        print("Plotting each graph is disabled, continuing with the CSV file\n")
    else:
        print("Plotting each graph as well as exporting a CSV file is disabled, continuing ith the s2p file\n")
# closing the instrument session

instr.close()

# ----------------------------------------csv file if the user wants one -----------------------------------------------
if csvFileOnOff:
    data = {'Frequencies': x,
            's11Pt1Real': s11ResultsPt1r,
            's11Pt2Imag': s11ResultsPt2i,
            's12Pt1Real': s12ResultsPt1r,
            's12Pt2Imag': s12ResultsPt2i,
            's21Pt1Real': s21ResultsPt1r,
            's21Pt2Imag': s21ResultsPt2i,
            's22Pt1Real': s22ResultsPt1r,
            's22Pt2Imag': s22ResultsPt2i}

    df = pd.DataFrame(data, columns=['Frequencies', 's11Pt1Real', 's11Pt2Imag', 's12Pt1Real', 's12Pt2Imag',
                                     's21Pt1Real', 's21Pt2Imag', 's22Pt1Real', 's22Pt2Imag'])
    df.to_csv(r'C:\Users\xxx\Documents\Tests\Tests\test1.csv', index=False, header=True)
    print(df)
else:
    if plotOnOff:
        print("Exporting CSV File is disabled, continuing with the s2p file \n")
    else:
        print("")
# ---------------------------------------------- s2p File------------------------------------------

meas_data = np.zeros((measCount, 2, 2), dtype=complex)
meas_data.real[:, 0, 0] = [float(i) for i in s11ResultsPt1r]  # complex data to measurement array
meas_data.imag[:, 0, 0] = [float(i) for i in s11ResultsPt2i]
meas_data.real[:, 0, 1] = [float(i) for i in s12ResultsPt1r]
meas_data.imag[:, 0, 1] = [float(i) for i in s12ResultsPt2i]
meas_data.real[:, 1, 0] = [float(i) for i in s21ResultsPt1r]
meas_data.imag[:, 1, 0] = [float(i) for i in s21ResultsPt2i]
meas_data.real[:, 1, 1] = [float(i) for i in s22ResultsPt1r]
meas_data.imag[:, 1, 1] = [float(i) for i in s22ResultsPt2i]

# print(meas_data)

# Exporting as s2p
net_dict = dict()  # dictionary for all networks (a network will be created for every power level)
net_freq = rf.Frequency(unit='hz')  # scikit-rf frequency object
net_freq = x

net_dict.update({'%sdBm' % cable_attenuation_generator: rf.Network(frequency=net_freq,
                                                                   s=meas_data[:, :, :], name='%sdBm' % (
        cable_attenuation_generator))})

# scikit NetworkSet containing one Network object for every power level
net_set = rf.NetworkSet(net_dict, name='ntwk_set')

net_set.write_touchstone(dir=file_string, filename=title)
